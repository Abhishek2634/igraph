# vim:set ts=4 sw=4 sts=4 et:
#
# This file is a YAML representation of the types used in the functions.yaml
# function specification file. It provides the meaning of each type in comments
# and also specifies the C types correspnding to each abstract type.
#
# See https://github.com/igraph/stimulus for more information

###############################################################################
## Core igraph data types
###############################################################################

INTEGER:
    # An ordinary igraph integer
    CTYPE: igraph_integer_t

REAL:
    # An ordinary igraph floating-point number
    CTYPE: igraph_real_t

BOOLEAN:
    # An ordinary igraph Boolean value
    CTYPE: igraph_bool_t

ERROR:
    # An igraph error code
    CTYPE: int

###############################################################################
## C data types
###############################################################################

INT:
    # A C integer
    CTYPE: int

CSTRING:
    # A null-terminated immutable C string
    CTYPE: const char*

###############################################################################
# Vectors, matrices and other template types
###############################################################################

VECTOR:
    # A vector of floating-point numbers
    CTYPE: igraph_vector_t
    FLAGS: BY_REF

VECTOR_BOOL:
    # A vector of Boolean values
    CTYPE: igraph_vector_bool_t
    FLAGS: BY_REF

MATRIX:
    # A matrix of floating-point numbers
    CTYPE: igraph_matrix_t
    FLAGS: BY_REF

# SOMETHING_OR_0 variants -- these will be phased out in favour of the
# OPTIONAL modifier

VECTOR_OR_0:
    # A vector of floating-point numbers values where a null pointer is also a valid value
    CTYPE: igraph_vector_t
    FLAGS: BY_REF

VECTOR_BOOL_OR_0:
    # A vector of Boolean values where a null pointer is also a valid value
    CTYPE: igraph_vector_bool_t
    FLAGS: BY_REF

###############################################################################
# Vertex and edge sequences
###############################################################################

EDGESET:
    # An igraph edge sequence
    CTYPE: igraph_es_t

VERTEXSET:
    # An igraph vertex sequence
    CTYPE: igraph_vs_t

###############################################################################
# Graph representations
###############################################################################

GRAPH:
    # An igraph graph
    CTYPE: igraph_t
    FLAGS: BY_REF

ADJLIST:
    # A graph represented as an adjacency list
    CTYPE: igraph_adjlist_t
    FLAGS: BY_REF

INCLIST:
    # A graph represented as an incidence list
    CTYPE: igraph_inclist_t
    FLAGS: BY_REF

# SOMETHING_OR_0 variants -- these will be phased out in favour of the
# OPTIONAL modifier

GRAPH_OR_0:
    # An igraph graph where a null pointer is also a valid value
    CTYPE: igraph_t
    FLAGS: BY_REF

###############################################################################
# Enums
###############################################################################

ADJACENCYMODE:
    # Enum that describes how an adjacency matrix should be constructed
    CTYPE: igraph_adjacency_t

BARABASI_ALGORITHM:
    # Enum that describes the various implementations of the Barabasi model
    # that igraph supports
    CTYPE: igraph_barabasi_algorithm_t

NEIMODE:
    # Enum that describes how a particular function should take into account
    # the neighbors of vertices
    CTYPE: igraph_neimode_t

STARMODE:
    # Enum that describes how a star graph should be constructed
    CTYPE: igraph_star_mode_t

TREEMODE:
    # Enum that describes how a tree graph should be constructed
    CTYPE: igraph_tree_mode_t

###############################################################################
# Miscellaneous
###############################################################################

ATTRIBUTES:
    # An opaque data structure that a high-level interface may use to pass
    # information about graph/vertex/edge attributes to a low-level igraph
    # C function
    CTYPE: void
    FLAGS: BY_REF
