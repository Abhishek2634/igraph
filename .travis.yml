
language: c
cache: ccache
dist: xenial
os: linux

env:
  global:
    - MAKEFLAGS="-j2"
    - CMAKE_GENERATOR=Ninja # build with ninja instead of make
    - CTEST_PARALLEL_LEVEL=2 # run tests in parallel
    - PATH="/usr/bin:$PATH" # needed in order to find the latest cmake

git:
  depth: 200    # to make sure we find the latest tag when building. Increase if not enough.

addons:
  apt:
    sources:
    - sourceline: "deb https://apt.kitware.com/ubuntu/ xenial main"
      key_url: "https://apt.kitware.com/keys/kitware-archive-latest.asc"
    packages:
    - cmake
    - ninja-build
    - flex
    - bison
    - docbook2x
    - xmlto
    - texinfo
    - source-highlight
    - libxml2-utils
    - xsltproc
    - fop
    - libgmp-dev
    - libglpk-dev
    - libarpack2-dev
    - libblas-dev
    - liblapack-dev
    - git
  homebrew:
    packages:
    - ccache
    - ninja
    # - flex  # test with the old flex version that ships with macOS
    # - bison # test with the old bison version that ships with macOS
    - gmp
    # - glpk # currently we test with internal GLPK on macOS

script:
  - CTEST_OUTPUT_ON_FAILURE=1 ctest # report output only for failed tests

jobs:
  include:
    - name: "Linux"
      os: linux
      install:
        - mkdir build
        - cd build
        - cmake .. -DIGRAPH_USE_INTERNAL_BLAS=1 -DIGRAPH_USE_INTERNAL_LAPACK=1 -DIGRAPH_USE_INTERNAL_ARPACK=1 -DIGRAPH_USE_INTERNAL_GLPK=1 -DIGRAPH_USE_INTERNAL_CXSPARSE=1 -DIGRAPH_VERIFY_FINALLY_STACK=1
        - cmake --build . --target build_tests
        
    - name: "Linux external deps"
      os: linux
      dist: bionic
      install:
        - mkdir build
        - cd build
        - cmake .. -DIGRAPH_VERIFY_FINALLY_STACK=1
        - cmake --build . --target build_tests
        
    # Test with x87 floating-point instructions instead of SSE
    # This may reveal tests that are numerically unstable, and therefore have a high risk of producing false positives
    # Since most numerically intensive computations happen in the dependencies, build with all-internal libraries
    - name: "Linux x87"
      os: linux
      env:
        - CFLAGS="-mfpmath=387" CXXFLAGS="-mfpmath=387"
      install:
        - mkdir build
        - cd build
        - /usr/bin/cmake .. -DIGRAPH_USE_INTERNAL_BLAS=1 -DIGRAPH_USE_INTERNAL_LAPACK=1 -DIGRAPH_USE_INTERNAL_ARPACK=1 -DIGRAPH_USE_INTERNAL_GLPK=1 -DIGRAPH_USE_INTERNAL_CXSPARSE=1
        - cmake --build . --target build_tests

    - name: "macOS"
      os: osx
      osx_image: xcode11.5    # we need a newer CMake in the image
      install:
        - mkdir build
        - cd build
        # disable internal BLAS/LAPACK in order to test building with Apple vecLib, which provides these APIs
        # do not use IGRAPH_VERIFY_FINALLY_STACK as it increases the runtimes immensely in combination with Address Sanitizer
        - cmake .. -DIGRAPH_USE_INTERNAL_BLAS=0 -DIGRAPH_USE_INTERNAL_LAPACK=0 -DIGRAPH_USE_INTERNAL_ARPACK=1 -DIGRAPH_USE_INTERNAL_GLPK=1 -DIGRAPH_USE_INTERNAL_CXSPARSE=1 -DUSE_SANITIZER=Address\;Undefined
        - cmake --build . --target build_tests

    - name: "Documentation"
      language: shell
      os: linux
      install:
        - mkdir build
        - cd build
        - cmake ..
      script:
        - cmake --build . --target doc

notifications:
  email:
    on_success: change
    on_failure: always
